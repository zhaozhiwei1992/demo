<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<modules>
		<module>user-api</module>
		<module>eureka-server</module>
		<module>config-server</module>
		<module>user-service-provider</module>
		<module>user-service-client</module>
		<module>hystrix-dashboard</module>
        <module>zuul-proxy</module>
		<module>netflix-turbine</module>
		<module>file-upload</module>
<!--		官方不再推荐自行编译, 直接使用jar或者docker-->
		<module>zipkin-server</module>
		<module>custom-monitor</module>
		<module>adminserver</module>
	</modules>
	<groupId>com.example</groupId>
	<artifactId>microservice</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>microservice</name>
    <packaging>pom</packaging>
	<description>Demo project for Spring Boot</description>

<!--	该方式springapplication才读取的到@artifactid@-->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<resource.delimiter>@</resource.delimiter>
		<java.version>1.8</java.version>
		<spring-cloud.version>Greenwich.SR2</spring-cloud.version>
		<spring-boot.version>2.1.7.RELEASE</spring-boot.version>
		<docker.image.prefix>microservice-cloud</docker.image.prefix>
		<docker.plugin.version>1.1.1</docker.plugin.version>
		<springfox-swagger.version>2.8.0</springfox-swagger.version>
		<springfox-staticdocs.version>2.6.1</springfox-staticdocs.version>
		<spring-boot-admin.version>2.0.4</spring-boot-admin.version>
		<zipkin.version>2.10.1</zipkin.version>
	</properties>

	<dependencies>
		<!--只留下一些公用配置-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-dependencies</artifactId>
                <version>${spring-boot-admin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

			<!--springboot 依賴-->
<!--			<dependency>-->
<!--				<groupId>org.springframework.boot</groupId>-->
<!--				<artifactId>spring-boot-dependencies</artifactId>-->
<!--				<version>${spring-boot.version}</version>-->
<!--				<type>pom</type>-->
<!--				<scope>import</scope>-->
<!--			</dependency>-->

			<!--springcloud 依赖-->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>1.18.20</version>
				<optional>true</optional>
				<scope>provided</scope>
			</dependency>

			<!-- swagger2 API文档生成 -->
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${springfox-swagger.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${springfox-swagger.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-staticdocs</artifactId>
				<version>${springfox-staticdocs.version}</version>
			</dependency>

<!--			zipkin-->

			<!-- zipkin 界面-->
			<dependency>
				<groupId>io.zipkin.java</groupId>
				<artifactId>zipkin-autoconfigure-ui</artifactId>
				<version>${zipkin.version}</version>
			</dependency>
			<!-- zipkin 服务类, 不再推荐自行编译-->
			<dependency>
				<groupId>io.zipkin.java</groupId>
				<artifactId>zipkin-server</artifactId>
				<version>${zipkin.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.plugin.version}</version>
<!--                这玩意儿打出来的包没有manifest-->
<!--				<executions>-->
<!--                    <execution>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                        <goal>build</goal>-->
<!--                    </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
				<configuration>
<!--					<dockerHost>https://192.168.2.68:2376</dockerHost>-->
<!--					<dockerCertPath>../docker/cenos-certs</dockerCertPath>-->
					<imageName>${docker.image.prefix}/${project.artifactId}:${project.version}</imageName>
					<!--<dockerDirectory>${project.basedir}/</dockerDirectory>-->
					<forceTags>true</forceTags>
					<maintainer>zhaozhiweishanxi@gmail.com</maintainer>
					<baseImage>java:8</baseImage>
<!--					<volumes>/tmp</volumes>-->
<!--					<workdir>/root</workdir>-->
					<!--"${JAVA_OPTS}",-->
<!--					系统属性egd表示熵收集守护进程(entropy gathering daemon)-->
					<entryPoint>
						["java","-Djava.security.egd=file:/dev/./urandom","-jar","/${project.build.finalName}.jar"]
					</entryPoint>
<!--					<skipDockerBuild>true</skipDockerBuild>-->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
						<!--                        <resource>-->
						<!--                            <targetPath>/docker</targetPath>-->
						<!--                            <directory>../docker</directory>-->
						<!--                            <include>.env</include>-->
						<!--                        </resource>-->
					</resources>

					<serverId>registry-aliyuncs</serverId>
				</configuration>
			</plugin>

			<!-- Maven Java 编译器插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf8</encoding>
				</configuration>
			</plugin>

<!--			处理多模块项目　docker没有manifest文件-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!--加入下面两项配置-->
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<includeSystemScope>true</includeSystemScope>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<delimiters>
						<delimiter>${resource.delimiter}</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
